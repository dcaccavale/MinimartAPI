// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MinimarketDataContext))]
    [Migration("20220509220717_hierarchy-mapping-VoucherAndDiscount2")]
    partial class hierarchymappingVoucherAndDiscount2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StoreId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoucherCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.DailyTimeRange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HourFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HourTo")
                        .HasColumnType("time");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("DailyTimeRange");
                });

            modelBuilder.Entity("Entities.Discount.GenericDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GenericDiscount");

                    b.HasDiscriminator<string>("Discriminator").IsComplete(false).HasValue("GenericDiscount");
                });

            modelBuilder.Entity("Entities.ItemProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PriceUnit")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmound")
                        .HasColumnType("float");

                    b.Property<double>("TotalDiscount")
                        .HasColumnType("float");

                    b.Property<Guid?>("VoucherAppledId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VoucherAppledId");

                    b.ToTable("ItemProduct");
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("VoucherCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VoucherCategoryId");

                    b.HasIndex("VoucherProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entities.RangeDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RangeDate");
                });

            modelBuilder.Entity("Entities.StockProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("StockProducts");
                });

            modelBuilder.Entity("Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RangeDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RangeDateId");

                    b.HasIndex("StoreId");

                    b.ToTable("Vouchers", (string)null);

                    b.HasDiscriminator<string>("VoucherType").IsComplete(false).HasValue("Voucher");
                });

            modelBuilder.Entity("Entities.Discount.PayTakeDiscount", b =>
                {
                    b.HasBaseType("Entities.Discount.GenericDiscount");

                    b.Property<int>("PayCount")
                        .HasColumnType("int");

                    b.Property<int>("TakeCount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PayTakeDiscount");
                });

            modelBuilder.Entity("Entities.Discount.PercentageDiscount", b =>
                {
                    b.HasBaseType("Entities.Discount.GenericDiscount");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("PercentageDiscount");
                });

            modelBuilder.Entity("Entities.VoucherCategory", b =>
                {
                    b.HasBaseType("Entities.Voucher");

                    b.HasDiscriminator().HasValue("VoucherCategory");
                });

            modelBuilder.Entity("Entities.VoucherProduct", b =>
                {
                    b.HasBaseType("Entities.Voucher");

                    b.HasDiscriminator().HasValue("VoucherProduct");
                });

            modelBuilder.Entity("Entities.Discount.PercentageSecundDiscount", b =>
                {
                    b.HasBaseType("Entities.Discount.PercentageDiscount");

                    b.HasDiscriminator().HasValue("PercentageSecundDiscount");
                });

            modelBuilder.Entity("Entities.Cart", b =>
                {
                    b.HasOne("Entities.Customer", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.HasOne("Entities.VoucherCategory", null)
                        .WithMany("CategoriesToApply")
                        .HasForeignKey("VoucherCategoryId");
                });

            modelBuilder.Entity("Entities.DailyTimeRange", b =>
                {
                    b.HasOne("Entities.Store", null)
                        .WithMany("DailyTimeRange")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Entities.ItemProduct", b =>
                {
                    b.HasOne("Entities.Cart", "Cart")
                        .WithMany("ProductsAdd")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Entities.Voucher", "VoucherAppled")
                        .WithMany()
                        .HasForeignKey("VoucherAppledId");

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("VoucherAppled");
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.VoucherCategory", null)
                        .WithMany("ProductExcept")
                        .HasForeignKey("VoucherCategoryId");

                    b.HasOne("Entities.VoucherProduct", null)
                        .WithMany("ProductToApply")
                        .HasForeignKey("VoucherProductId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.StockProduct", b =>
                {
                    b.HasOne("Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Entities.Voucher", b =>
                {
                    b.HasOne("Entities.RangeDate", "RangeDate")
                        .WithMany()
                        .HasForeignKey("RangeDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RangeDate");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Entities.Cart", b =>
                {
                    b.Navigation("ProductsAdd");
                });

            modelBuilder.Entity("Entities.Store", b =>
                {
                    b.Navigation("DailyTimeRange");
                });

            modelBuilder.Entity("Entities.VoucherCategory", b =>
                {
                    b.Navigation("CategoriesToApply");

                    b.Navigation("ProductExcept");
                });

            modelBuilder.Entity("Entities.VoucherProduct", b =>
                {
                    b.Navigation("ProductToApply");
                });
#pragma warning restore 612, 618
        }
    }
}
